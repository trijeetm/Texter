{
  "name": "diskdb",
  "version": "0.1.14",
  "main": "lib/diskdb.js",
  "description": "A Light Weight Disk based JSON Database with a MongoDB like API",
  "homepage": "http://arvindr21.github.io/diskDB",
  "bugs": {
    "url": "https://github.com/arvindr21/diskdb/issues"
  },
  "author": {
    "name": "Arvind Ravulavaru",
    "email": "arvind.ravulavaru@gmail.com",
    "url": "http://thejackalofjavascript.com/"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/arvindr21/diskdb"
  },
  "license": "MIT",
  "files": [
    "lib"
  ],
  "keywords": [
    "diskDB",
    "JSON",
    "Database",
    "file system",
    "CRUD",
    "light weight"
  ],
  "devDependencies": {
    "grunt-contrib-jshint": "^0.10.0",
    "grunt-contrib-nodeunit": "^0.3.3",
    "grunt-contrib-watch": "^0.6.1",
    "load-grunt-tasks": "^0.4.0",
    "time-grunt": "^0.3.1",
    "jshint-stylish": "^0.2.0"
  },
  "dependencies": {
    "chalk": "^0.4.0",
    "node-uuid": "^1.4.1",
    "merge": "^1.1.3"
  },
  "scripts": {
    "test": "grunt"
  },
  "readme": "# diskDB [![Build Status](https://secure.travis-ci.org/arvindr21/diskDB.png?branch=master)](https://travis-ci.org/arvindr21/diskDB) [![NPM version](https://badge-me.herokuapp.com/api/npm/diskdb.png)](http://badges.enytc.com/for/npm/diskdb) [![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/arvindr21/diskdb/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\r\n\r\n[![NPM](https://nodei.co/npm/diskdb.png?downloads=true&stars=true)](https://nodei.co/npm/diskdb/)\r\n\r\nA Lightweight Disk based JSON Database with a MongoDB like API for Node.\r\n\r\n_You will never know that you are interacting with a File System_\r\n\r\n##Contents\r\n\r\n* [Getting Started](#getting-started)\r\n* [Documentation](#documentation)\r\n  * [Connect](#connect-to-db)\r\n  * [Load Collections](#load-collections)\r\n  * [Write/Save](#writesave-to-collection)\r\n  * [Read](#read-from-collection)\r\n  * [Update](#update-collection)\r\n  * [Remove](#remove-collection)\r\n  * [Count](#count)\r\n* [Examples](#examples)\r\n* [Performance](#performance)\r\n* [Contributing](#contributing)\r\n* [Release History](#release-history)\r\n\r\n## Getting Started\r\nInstall the module locally :  \r\n```bash\r\n$ npm install diskdb\r\n```\r\n\r\n```js\r\nvar db = require('diskdb');\r\ndb = db.connect('/path/to/db-folder', ['collection-name']);\r\n// you can access the traditional JSON DB methods here\r\n```\r\n\r\n## Documentation\r\n### Connect to DB\r\n```js\r\ndb.connect(pathToFolder, ['filename']);\r\n```\r\nFilename will be the name of the JSON file. You can omit the extension, diskDB will take care of it for you.\r\n\r\n```js\r\nvar db = require('diskdb');\r\ndb = db.connect('/examples/db', ['articles']);\r\n// or simply\r\ndb.connect('/examples/db', ['articles']);\r\n```\r\n\r\nThis will check for a directory at given path, if it does not exits, diskDB will throw an error and exit. \r\n\r\nIf the directory exists but the file/collection does not exist, diskDB will create it for you. \r\n\r\n**Note** : If you have manually created an empty JSON file, please make sure that it contains at least an empty array.\r\n\r\n```js\r\n[]\r\n```\r\nElse it will throw an error like\r\n\r\n```bash\r\nundefined:0\r\n\r\n^\r\nSyntaxError: Unexpected end of input\r\n```\r\n\r\n### Load Collections \r\nAlternatively you can also load collections like \r\n\r\n```js\r\nvar db = require('diskdb');\r\n// this\r\ndb = db.connect('/examples/db');\r\ndb.loadCollections(['articles']);\r\n//or\r\ndb.connect('/examples/db');\r\ndb.loadCollections(['articles']);\r\n//or\r\ndb.connect('/examples/db')\r\n  .loadCollections(['articles']);\r\n//or\r\ndb.connect('/examples/db', ['articles']);\r\n```\r\n#### Load Multiple Collections\r\n\r\n```js\r\nvar db = require('diskdb');\r\ndb.connect('/examples/db', ['articles','comments','users']);\r\n```\r\n\r\n\r\n### Write/Save to Collection\r\n```js\r\ndb.collectioName.save(object);\r\n```\r\nOnce you have loaded a collection, you can access the collection's methods using the dot notation like\r\n\r\n```js\r\ndb.[collectionName].[methodname]\r\n```\r\nTo save the data, you can use\r\n```js\r\nvar db = require('diskdb');\r\ndb.connect('db', ['articles']);\r\nvar article = {\r\n    title : \"diskDB rocks\",\r\n    published : \"today\",\r\n    rating : \"5 stars\"\r\n}\r\ndb.articles.save(article);\r\n// or\r\ndb.articles.save([article]);\r\n```\r\nThe saved data will be \r\n```js\r\n[\r\n    {\r\n        \"title\": \"diskDB rocks\",\r\n        \"published\": \"today\",\r\n        \"rating\": \"5 stars\",\r\n        \"_id\": \"0f6047c6c69149f0be0c8f5943be91be\"\r\n    }\r\n]\r\n```\r\nYou can also save multiple objects at once like\r\n\r\n```js\r\nvar db = require('diskdb');\r\ndb.connect('db', ['articles']);\r\nvar article1 = {\r\n    title : 'diskDB rocks',\r\n    published : 'today',\r\n    rating : '5 stars'\r\n}\r\n\r\nvar article2 = {\r\n    title : 'diskDB rocks',\r\n    published : 'yesterday',\r\n    rating : '5 stars'\r\n}\r\n\r\nvar article3 = {\r\n    title : 'diskDB rocks',\r\n    published : 'today',\r\n    rating : '4 stars'\r\n}\r\ndb.articles.save([article1, article2, article3]);\r\n```\r\nAnd this will return the inserted objects\r\n\r\n```js\r\n[ { title: 'diskDB rocks',\r\n    published: 'today',\r\n    rating: '4 stars',\r\n    _id: 'b1cdbb3525b84e8c822fc78896d0ca7b' },\r\n  { title: 'diskDB rocks',\r\n    published: 'yesterday',\r\n    rating: '5 stars',\r\n    _id: '42997c62e1714e9f9d88bf3b87901f3b' },\r\n  { title: 'diskDB rocks',\r\n    published: 'today',\r\n    rating: '5 stars',\r\n    _id: '4ca1c1597ddc4020bc41b4418e7a568e' } ]\r\n```\r\n\r\n### Read from Collection\r\nThere are 2 methods available for reading the JSON collection\r\n* db.collectioName.find(query)\r\n* db.collectioName.findOne(query)\r\n\r\n\r\n#### db.collectioName.find() \r\n```js\r\nvar db = require('diskdb');\r\ndb.connect('/examples/db', ['articles']);\r\ndb.articles.find();\r\n```\r\nThis will return all the records\r\n```js\r\n[{ \r\n    title: 'diskDB rocks',\r\n    published: 'today',\r\n    rating: '5 stars',\r\n    _id: '0f6047c6c69149f0be0c8f5943be91be' \r\n}]\r\n```\r\nYou can also query with a criteria like\r\n```js\r\nvar db = require('diskdb');\r\ndb.connect('/examples/db', ['articles']);\r\ndb.articles.find({rating : \"5 stars\"});\r\n```\r\nThis will return all the articles which have a rating of 5. \r\n\r\nNested JSON : \r\n\r\n```js\r\nvar articleComments = {\r\n    title: 'diskDB rocks',\r\n    published: '2 days ago',\r\n    comments: [{\r\n        name: 'a user',\r\n        comment: 'this is cool',\r\n        rating: 2\r\n    }, {\r\n        name: 'b user',\r\n        comment: 'this is ratchet',\r\n        rating: 3\r\n    }, {\r\n        name: 'c user',\r\n        comment: 'this is awesome',\r\n        rating: 2\r\n    }]\r\n}\r\n```\r\n```js\r\nvar savedArticle = db.articles.save([articleComments);\r\nfoundArticles = db.articles.find({rating : 2});\r\n```\r\nSince diskDB is mostly for light weight data storage, avoid nested structures and huge datasets.\r\n\r\n#### db.collectioName.findOne(query)\r\n```js\r\nvar db = require('diskdb');\r\ndb.connect('/examples/db', ['articles']);\r\ndb.articles.findOne();\r\n```\r\n\r\nIf you do not pass a query, diskDB will return the first article in the collection. If you pass a query, it will return first article in the filtered data. \r\n\r\n```js\r\nvar db = require('diskdb');\r\ndb.connect('/examples/db', ['articles']);\r\ndb.articles.findOne({_id: '0f6047c6c69149f0be0c8f5943be91be'});\r\n```\r\n### Update Collection\r\n```js\r\ndb.collectioName.update(query, data, options);\r\n```\r\n\r\nYou can also update one or many objects in the collection\r\n```js\r\noptions = {\r\n    multi: false, // update multiple - default false\r\n    upsert: false // if object is not found, add it (update-insert) - default false\r\n}\r\n```\r\nUsage \r\n```js\r\nvar db = require('diskdb');\r\ndb.connect('/examples/db', ['articles']);\r\n\r\nvar query = {\r\n  title : 'diskDB rocks'\r\n};\r\n\r\nvar dataToBeUpdate = {\r\n  title : 'diskDB rocks again!',\r\n};\r\n\r\nvar options = {\r\n   multi: false,\r\n   upsert: false\r\n};\r\n\r\nvar updated = db.articles.update(query, dataToBeUpdate, options);\r\nconsole.log(updated); // { updated: 1, inserted: 0 }\r\n```\r\n\r\n### Remove Collection\r\n```js\r\ndb.collectioName.remove(query, multi);\r\n```\r\nYou can remove the entire collection (including the file) or you can remove the matched objects by passing in a query. When you pass a query, you can either delete all the matched objects or only the first one by passing `multi` as `false`. The default value of `multi` is `true`.\r\n\r\n```js\r\nvar db = require('diskdb');\r\ndb.connect('/examples/db', ['articles']);\r\ndb.articles.remove({rating : \"5 stars\"});\r\n```\r\n```js\r\nvar db = require('diskdb');\r\ndb.connect('/examples/db', ['articles']);\r\ndb.articles.remove({rating : \"5 stars\"}, true); // remove all matched. Default - multi = true\r\n```\r\n\r\n```js\r\nvar db = require('diskdb');\r\ndb.connect('/examples/db', ['articles']);\r\ndb.articles.remove({rating : \"5 stars\"}, false); // remove only the first match\r\n```\r\nUsing remove without any params will delete the file and will remove the db instance.\r\n```js\r\nvar db = require('diskdb');\r\ndb.connect('/examples/db', ['articles']);\r\ndb.articles.remove();\r\n```\r\nAfter the above operation `db.articles` is `undefined`.\r\n\r\n### Count\r\n```js\r\ndb.collectioName.count();\r\n```\r\nWill return the count of objects in the Collection\r\n```js\r\nvar db = require('diskdb');\r\ndb.connect('/examples/db', ['articles']);\r\ndb.articles.count(); // will give the count\r\n```\r\n\r\n## Examples\r\nRefer to the [examples](https://github.com/arvindr21/diskDB/tree/master/examples) folder.\r\n\r\n## Performance\r\nTo validate diskDB's performance and to check if it meets your needs, you can clone this repo and run\r\n\r\n```bash\r\n$ node performance/time.js\r\n```\r\nAn average of few tests (run on OS X - 10.9.3 | 2.9GHZ i7 | 8GB 1600MHz DDR3) can be found below\r\n\r\n#### Time taken to process x number of objects (in ms) vs Action Performed\r\n\r\n<table>\r\n    <tr>\r\n        <td></td>\r\n        <td>1 (object)</td>\r\n        <td>1000 (objects)</td>\r\n        <td>10000 (objects)</td>\r\n        <td>100000 (objects)</td>\r\n        <td>1000000 (objects)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Save</td>\r\n        <td>1 (ms)</td>\r\n        <td>15 (ms)</td>\r\n        <td>137 (ms)</td>\r\n        <td>1782 (ms)</td>\r\n        <td>14425 (ms)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Find all without query</td>\r\n        <td>0 (ms)</td>\r\n        <td>2 (ms)</td>\r\n        <td>12 (ms)</td>\r\n        <td>204 (ms)</td>\r\n        <td>2923 (ms)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Find all with query</td>\r\n        <td>0 (ms)</td>\r\n        <td>2 (ms)</td>\r\n        <td>17 (ms)</td>\r\n        <td>738 (ms)</td>\r\n        <td>1985 (ms)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Find one without query</td>\r\n        <td>0 (ms)</td>\r\n        <td>1 (ms)</td>\r\n        <td>9 (ms)</td>\r\n        <td>791 (ms)</td>\r\n        <td>1676 (ms)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Find one with query</td>\r\n        <td>0 (ms)</td>\r\n        <td>1 (ms)</td>\r\n        <td>8 (ms)</td>\r\n        <td>219 (ms)</td>\r\n        <td>1410 (ms)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Update all records</td>\r\n        <td>1 (ms)</td>\r\n        <td>7 (ms)</td>\r\n        <td>61 (ms)</td>\r\n        <td>206 (ms)</td>\r\n        <td>48035 (ms)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Get count</td>\r\n        <td>0 (ms)</td>\r\n        <td>3 (ms)</td>\r\n        <td>11 (ms)</td>\r\n        <td>260 (ms)</td>\r\n        <td>2420 (ms)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Remove with query</td>\r\n        <td>0 (ms)</td>\r\n        <td>7 (ms)</td>\r\n        <td>59 (ms)</td>\r\n        <td>984 (ms)</td>\r\n        <td>48191 (ms)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Remove collection</td>\r\n        <td>0 (ms)</td>\r\n        <td>1 (ms)</td>\r\n        <td>4 (ms)</td>\r\n        <td>52 (ms)</td>\r\n        <td>154 (ms)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>File size</td>\r\n        <td>0.000111 (MB)</td>\r\n        <td>0.116671 (MB)</td>\r\n        <td>1.196671 (MB)</td>\r\n        <td>12.266671 (MB)</td>\r\n        <td>125.666671 (MB)</td>\r\n    </tr>\r\n</table>\r\n\r\n\r\n## Contributing\r\nSee the [CONTRIBUTING Guidelines](https://github.com/arvindr21/diskDB/blob/master/CONTRIBUTING.md)\r\n\r\n## Release History\r\n* 0.1.x\r\n  * Base Module with\r\n    * Connect to a Folder\r\n    * Access a Collection/File\r\n    * Create Read Update Delete on JSON object\r\n    * Minor fixes and tests\r\n    * Performance improvements\r\n\r\n## License\r\nCopyright (c) 2014 Arvind Ravulavaru. Licensed under the MIT license.",
  "readmeFilename": "README.md",
  "_id": "diskdb@0.1.14",
  "dist": {
    "shasum": "514479389041f568cf49c00e0fe6bd48f76e4b98"
  },
  "_from": "diskdb@",
  "_resolved": "https://registry.npmjs.org/diskdb/-/diskdb-0.1.14.tgz"
}
